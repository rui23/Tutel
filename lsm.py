import numpy as np
import matplotlib.pyplot as plt

# 假设我们有以下数据点
# 32GPUs
x1 = [
    4194304,
    2796202.66666667,
    2097152,
    8388608,
    5592405.33333333,
    4194304,
    16777216,
    11184810.6666667,
    8388608,
    8388608,
    5592405.33333333,
    4194304,
    16777216,
    11184810.6666667,
    8388608,
    33554432,
    22369621.3333333,
    16777216,
    2097152,
    1398101.33333333,
    1048576,
    4194304,
    2796202.66666667,
    2097152,
    8388608,
    5592405.33333333,
    4194304,
    8388608,
    5592405.33333333,
    4194304,
    16777216,
    11184810.6666667,
    8388608,
    33554432,
    22369621.3333333,
    16777216,
    16777216,
    11184810.6666667,
    8388608,
    33554432,
    22369621.3333333,
    16777216,
    67108864,
    44739242.6666667,
    33554432,
    4194304,
    2796202.66666667,
    2097152,
    8388608,
    5592405.33333333,
    4194304,
    16777216,
    11184810.6666667,
    8388608,
    16777216,
    11184810.6666667,
    8388608,
    33554432,
    22369621.3333333,
    16777216,
    67108864,
    44739242.6666667,
    33554432,
    33554432,
    22369621.3333333,
    16777216,
    67108864,
    44739242.6666667,
    33554432,
    134217728,
    89478485.3333333,
    67108864,
    8388608,
    5592405.33333333,
    4194304,
    16777216,
    11184810.6666667,
    8388608,
    33554432,
    22369621.3333333,
    16777216,
]
y1 = [
    6008.825,
    4635.58333333333,
    4600.41875,
    8668.5375,
    6688.55833333333,
    5802.95,
    16090.35,
    11438.2833333333,
    8917.06875,
    8898.7375,
    6967.49166666667,
    5954.875,
    15848.525,
    11376.475,
    8586.29375,
    28683.5625,
    20187.1333333333,
    12000.625,
    3862.575,
    2511.20833333333,
    3930.71875,
    5669.2125,
    4613.36666666667,
    3777.4,
    9282.3125,
    4179.69166666667,
    3230.725,
    9197.9625,
    7191.75833333333,
    5942.76875,
    16041.9375,
    11549.225,
    8906.5,
    29078.6,
    19716.9333333333,
    15729.375,
    15963.6875,
    11323.925,
    8995.90625,
    27619.7,
    16622.1,
    12036.2375,
    46690.475,
    31210.7166666667,
    23590.975,
    3131.3125,
    2140.25833333333,
    1813.0375,
    6013.25,
    4134.45,
    5766.11875,
    16327.4375,
    11231.775,
    8849.95,
    12724.2875,
    8017.43333333333,
    6031.03125,
    23435.1875,
    15818.2083333333,
    12019.9,
    46708.125,
    31188.55,
    23561.5125,
    23379.7375,
    15801.5166666667,
    11953.00625,
    46791.275,
    31101.3833333333,
    23545.81875,
    92694.575,
    62185.4416666667,
    46618.31875,
    6007.1,
    4157.49166666667,
    3182.9375,
    11967.05,
    8088.93333333333,
    6034.8375,
    23406.8125,
    15813.9916666667,
    11963.6,
]

# 16GPUs
x2 = [
    4194304,
    2796202.667,
    2097152,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    2097152,
    1398101.333,
    1048576,
    4194304,
    2796202.667,
    2097152,
    8388608,
    5592405.333,
    4194304,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    67108864,
    44739242.67,
    33554432,
    4194304,
    2796202.667,
    2097152,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    67108864,
    44739242.67,
    33554432,
    33554432,
    22369621.33,
    16777216,
    67108864,
    44739242.67,
    33554432,
    134217728,
    89478485.33,
    67108864,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216
]
y2 = [
    2526.8625,
    1783.7,
    1411.41875,
    5035.925,
    3416.983333333330,
    2590.8375,
    9632.9875,
    6619.508333333330,
    5033.5,
    5024.8375,
    3369.391666666670,
    2574.19375,
    9608.05,
    6512.275,
    5056.1125,
    19092.95,
    12828.25,
    9631.4625,
    1388.0875,
    991.2916667,
    781.11875,
    2529.1625,
    1770.35,
    1386.1,
    5021.9125,
    3389.825,
    2561.55625,
    5031.6,
    3399.941667,
    2572.9125,
    9655.0125,
    6489.225,
    5058.075,
    19075.175,
    12821.341666666700,
    9647.56875,
    9630.5875,
    6561.583333333330,
    5034.175,
    19048.7375,
    12721.475,
    9710.60625,
    37864.8375,
    25450.233333333300,
    19049.9625,
    2583.975,
    1778.341667,
    1428.0625,
    5041.9875,
    3395.291667,
    2561.75,
    9692.5875,
    6620.5,
    5019.4,
    9596.525,
    6529.9,
    5054.25,
    19068.2625,
    12644.891666666700,
    9688.79375,
    37917.1875,
    25472.341666666700,
    19082.19375,
    18944.3625,
    12744.425,
    9669.49375,
    37899.775,
    25140.133333333300,
    19081.075,
    75153.6375,
    50547.975,
    37939.46875,
    5011.1875,
    3406.258333333330,
    2608.6125,
    9664.7375,
    6513.408333333330,
    5020.93125,
    19118.0875,
    12811.158333333300,
    9707.6
]

# 8GPUs
x3 = [
    4194304,
    2796202.667,
    2097152,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    2097152,
    1398101.333,
    1048576,
    4194304,
    2796202.667,
    2097152,
    8388608,
    5592405.333,
    4194304,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    67108864,
    44739242.67,
    33554432,
    4194304,
    2796202.667,
    2097152,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216,
    67108864,
    44739242.67,
    33554432,
    33554432,
    22369621.33,
    16777216,
    67108864,
    44739242.67,
    33554432,
    134217728,
    89478485.33,
    67108864,
    8388608,
    5592405.333,
    4194304,
    16777216,
    11184810.67,
    8388608,
    33554432,
    22369621.33,
    16777216
]
y3 = [
    1591.975,
    1099.8416666666700,
    846.68125,
    3014.8125,
    2066.925,
    1614.775,
    5807.2625,
    3935.95,
    3019.78125,
    2996.55,
    2097.4416666666700,
    1627.7875,
    5789.8625,
    3953.508333333330,
    3047.6875,
    11413.6375,
    7701.133333333330,
    5826.00625,
    822.875,
    595.0583333333330,
    476.05,
    1589.8,
    1089.7166666666700,
    838.05,
    2985.85,
    2077.2916666666700,
    1615.83125,
    3001.5875,
    2068.6916666666700,
    1616.49375,
    5786.875,
    3945.5333333333300,
    3016.475,
    11389.0875,
    7690.325,
    5840.64375,
    5802.7625,
    3960.1583333333300,
    3034.13125,
    11390.0625,
    7674.85,
    5813.00625,
    22745.7875,
    15209.375,
    11475.375,
    1609.5,
    1047.2333333333300,
    852.00625,
    2986.8625,
    2123.758333333330,
    1612.6625,
    5786.375,
    3943.05,
    3034.61875,
    5939.075,
    3936.975,
    3016.95625,
    11432.5625,
    7664.708333333330,
    5830.8375,
    22756.8375,
    15162.108333333300,
    11457.03125,
    11417.575,
    7686.383333333330,
    5804.38125,
    22730.875,
    15133.091666666700,
    11466.0,
    45437.025,
    30350.65,
    22761.2375,
    3076.2625,
    2066.2,
    1616.08125,
    5768.475,
    3943.8166666666700,
    3022.95625,
    11437.8625,
    7687.741666666670,
    5818.04375
]

def preproc(x, y):
    x = list(x[1::3] + x[2::3])
    y = list(y[1::3] + y[2::3])

    x = np.array(x)
    y = np.array(y)

    x /= 1000000000

    y /= 1000000

    x = x[::]

    # 我们需要在x前面添加一个列向量的1，因为线性方程是 y = mx + b
    A = np.vstack([x, np.ones(len(x))]).T


    # 使用numpy的lstsq函数求解m和b
    m, b = np.linalg.lstsq(A, y, rcond=None)[0]

    # 打印斜率m和截距b
    print(f"Slope: {m}")
    print(f"Intercept: {b}")

    x_line = np.linspace(min(x), max(x), 100)
    y_line = m * x_line + b

    # Create a dictionary to store the averaged y values
    avg_y_dict = {}

    # Iterate over the x and y arrays
    for xi, yi in zip(x, y):
        if xi in avg_y_dict:
            avg_y_dict[xi].append(yi)
        else:
            avg_y_dict[xi] = [yi]

    # Create new arrays with the merged x values and averaged y values
    x = np.array(list(avg_y_dict.keys()))
    y = np.array([np.mean(vals) for vals in avg_y_dict.values()])
    return x_line, y_line, x, y
x1_line, y1_line, x1, y1 = preproc(x1, y1)
x2_line, y2_line, x2, y2 = preproc(x2, y2)
x3_line, y3_line, x3, y3 = preproc(x3, y3)

# 绘制原始数据点和拟合线

plt.figure(figsize=(6, 4))
plt.ylabel("AlltoAll elapsed time[s]", fontsize=24)
plt.xticks(fontsize=22)
plt.yticks(fontsize=22)
plt.plot(x1_line, y1_line, color="blue", label=f"Predicted (32GPUs)")
plt.scatter(x1, y1, color="blue", marker="o", s=24, label="Measured (32GPUs)")
plt.plot(x2_line, y2_line, color="green", label=f"Predicted (16GPUs)")
plt.scatter(x2, y2, color="green", marker="s", s=24, label="Measured (16GPUs)")
plt.plot(x3_line, y3_line, color="orange", label=f"Predicted (8GPUs)")
plt.scatter(x3, y3, color="orange", marker="v", s=24, label="Measured (8GPUs)")
plt.xlabel("Input size[Gbytes]", fontsize=24)
plt.xticks(np.linspace(0, 0.10, num=3))
# plt.ticklabel_format(style="sci", axis="x", scilimits=(0, 0))
# plt.tight_layout()
plt.subplots_adjust(left=0.2, right=0.95, top=0.85, bottom=0.2)
plt.legend(loc="upper left")
plt.savefig("alltoall.png", dpi=550)
